Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра ПІ




Звіт з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»






Виконала: 
ст. гр. ПЗПІ-22-8
Худанова П.А.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П


Харків 2024

Мета: Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
Завдання: 
1.	Студент повинен обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
2.	Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, 
та продемонструвати застосування обраних методів.
3.	Кожен метод рефакторингу повинен супроводжуватись:
    •	Описом проблеми, яку вирішує даний метод.
    •	Кодом до і після застосування методу рефакторингу.
    •	Поясненням переваг використаного методу.
Хід роботи: Кожен метод супроводжується прикладами, в яких видно проблему до рефакторингу та результати після його застосування. 
Слайди презентації містять всі обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку А.

1. Метод «Extract Method».
Опис: Цей метод використовується для того, щоб розбити великі, громіздкі методи на кілька менших.

До рефакторингу:
1 def calculate_invoice(items):
2    total = 0
3    for item in items:
4        if item.category == 'book':
5            total += item.price * 0.9  # 10% discount for books
6        elif item.category == 'food':
7            total += item.price * 0.8  # 20% discount for food
8        else:
9            total += item.price
10    return total

Після рефакторингу:
1 def calculate_invoice(items):
2    total = 0
3    for item in items:
4        total += calculate_discount(item)
5    return total
6
7 def calculate_discount(item):
8    if item.category == 'book':
9        return item.price * 0.9
10    elif item.category == 'food':
11        return item.price * 0.8
12    return item.price

2. Метод «Rename Method».
Опис: Перейменування методу дозволяє зробити код зрозумілішим. Якщо метод має неінформативну або незрозумілу назву, 
це ускладнює розуміння його функції.

До рефакторингу:
1 class Order:
2     def c(self):
3         if self.is_expedited:
4             return self.total * 0.1
5         return self.total * 0.05
 
Після рефакторингу:
1 class Order:
2    def calculate_discount(self):
3        if self.is_expedited:
4            return self.total * 0.1
5        return self.total * 0.05

3. Метод «Replace Conditional with Polymorphism» .
Опис: Цей метод використовується для заміни складних умовних конструкцій (як-от численні if-else чи switch-вирази) на поліморфізм, 
де різні варіанти поведінки коду представлені за допомогою окремих класів..

До рефакторингу:
1 class Employee:
2    def calculate_pay(self):
3        if self.role == 'Manager':
4            return self.salary + self.salary * 0.1  # бонус для менеджерів
5        elif self.role == 'Developer':
6            return self.salary + self.salary * 0.05  # бонус для розробників
7        else:
8            return self.salary

Після рефакторингу:
1 class Employee:
2    def calculate_pay(self):
3        return self.salary
4
5 class Manager(Employee):
6    def calculate_pay(self):
7        return self.salary + self.salary * 0.1
8
9 class Developer(Employee):
10    def calculate_pay(self):
11        return self.salary + self.salary * 0.05

Висновок: Ми вивчили основи рефакторингу коду та його значення для покращення якості програмного забезпечення. 
Завдяки використанню методів, таких як виділення методу, перейменування методів і заміна умовної логіки поліморфізмом, 
ми змогли зменшити складність, підвищити читабельність і спростити підтримку коду.
Посилання на відеозапис: https://youtu.be/fHc0XTBE5Qk
Список використаних джерел:
1. Фаулер Мартін. "Refactoring: Improving the Design of Existing Code"
2. Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" (2-е видання)

ДОДАТОК А
Презентація на тему «Методи рефакторингу коду програмного забезпечення».

Рисунок 1 – Титульний слайд
Рисунок 2 – Вступ
Рисунок 3 – Метод «Extract Method»
Рисунок 4 – Метод «Rename Method»
Рисунок 5 – Метод «Replace Conditional with Polymorphism» 
Рисунок 6 – Приклад коду до 1 методу
Рисунок 7 – Приклад коду до 2 методу
Рисунок 8 – Приклад коду до 3 методу
Рисунок 9 – Висновки
Рисунок 10 – Список використаних джерел
