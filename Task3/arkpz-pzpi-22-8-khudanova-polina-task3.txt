Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 3
Тема роботи: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»
з дисципліни «Аналіз та рефакторинг коду»






Виконала:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Худанова П.А.	 




Харків 2024
 
Мета роботи: На лабораторній роботі №3 потрібно розробити бізнес-логіку та функції адміністрування серверної частини  програмної системи.
Хід роботи: 
У процесі розробки серверної частини проєкту були прийняті наступні інженерні рішення. Для серверної частини було використано Node.js як основний серверний фреймворк. PostgreSQL було обрано для зберігання даних через його потужні можливості роботи з транзакціями та зв'язками між таблицями.
Серверна частина реалізована з використанням модульного підходу. Це дозволяє легко масштабувати систему та додавати новий функціонал.
Текстовий опис інженерних рішень:
1.	Обробка даних від датчиків:
	Система отримує повідомлення через MQTT-протокол з інформацією про температуру та вологість від IoT-пристроїв.
	Дані аналізуються та оновлюються у відповідному записі в базі даних за унікальним feeder_id.
2.	Зберігання даних:
	Інформація про температуру, вологість, і час останнього оновлення зберігається у таблиці feeder.
3.	Адміністрування:
	Адміністратори можуть отримати список усіх користувачів, переглядати та змінювати дані про них.
	Можливість видалення користувачів та пов'язаних даних через API.
4.	Масштабованість:
	Система підтримує додавання нових пристроїв через MQTT, автоматично обробляючи повідомлення від них.
Фрагменти програмного коду
Бізнес логіка: математичні методи обробки даних
Код для додавання годівниці:
1 const addFeeder = async (petId, food, temperature, humidity) => {
2   try {
3     const query = `
4       INSERT INTO feeder (pet_id, food, last_updated, temperature, humidity)
5       VALUES ($1, $2, NOW(), $3, $4)
6       RETURNING *;
7     `;
8     const values = [petId, food, temperature, humidity];
9     const res = await client.query(query, values);
10     return res.rows[0];
11   } catch (err) {
12     console.error('Ошибка добавления кормушки:', err);
13     throw err;
14   }
15 };
Адміністрування серверної частини
Фрагмент програмного коду для оновлення ролі користувача та їжі в годівниці.
1  const updateUserRole = async (userId, role) => {
2    try {
3      const query = `
4        UPDATE users
5        SET user_role = $1, updated_at = NOW()
6        WHERE id = $2
7        RETURNING *;
8      `;
9      const values = [role, userId];
10      const res = await client.query(query, values);
11      return res.rows[0];
12    } catch (err) {
13      console.error('Помилка оновлення ролі користувача:', err);
14      throw err;
15    }
16  };
17  
18  const updateFeederFood = async (feederId, food) => {
19    try {
20      const query = `
21        UPDATE feeder
22        SET food = $1, last_updated = NOW()
23        WHERE id = $2
24        RETURNING *;
25      `;
26      const values = [food, feederId];
27      const res = await client.query(query, values);
28      return res.rows[0];
29    } catch (err) {
30      console.error('Помилка оновлення їжі в годівниці:', err);
31      throw err;
32    }
33  };

Висновки: У результаті виконання завдання була розроблена бізнес-логіка серверної частини програмної системи, а також реалізовані функції адміністрування, що забезпечують зручне керування основними елементами системи. Зокрема, були реалізовані функції для додавання та редагування даних про користувачів, тварин та годівниці, а також адміністрування прав доступу користувачів та підтримка коректності даних у системі.
Посилання на відео: https://youtu.be/eYLz5Oi8i00?feature=shared



ДОДАТОК А
UML діаграма діяльності
 
Рисунок 1 – UML діаграма діяльності



ДОДАТОК Б
UML діаграма взаємодії
 
Рисунок 2 – UML діаграма взаємодії між клієнтом і сервером UML діаграма взаємодії між клієнтом і сервером

