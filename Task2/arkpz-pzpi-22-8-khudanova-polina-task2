Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 2
Тема роботи: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»
з дисципліни «Аналіз та рефакторинг коду»






Виконала:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Худанова П. А.	 







Харків 2024


 
Мета роботи: На лабораторній роботі №2 потрібно розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
Завдання:
1.	Розробити будову програмної системи.
2.	Створити UML діаграму прецедентів для серверної частини системи.
3.	Створити ER діаграму даних.
4.	Розробити базу даних (БД) програмної системи.
5.	Створити діаграму структури БД.
6.	Розробити функції роботи з БД (ORM або CoRM тощо).
7.	Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
8.	Створити специфікацію розробленого API.
9.	Створити програмну реалізацію розробленого API та функцій роботи з БД.
Хід роботи:
1.	Архітектура програмної системи
Ось текстовий опис інженерних рішень для нашої системи IoT:
1.	Серверна частина:
o	Мова програмування: Node.js (з використанням Express.js для створення REST API).
o	База даних: PostgreSQL (або інша реляційна БД).
o	ORM: Sequelize для взаємодії з БД.
o	Протокол API: REST API.
o	Автентифікація: JWT (JSON Web Token).
2.	Основні компоненти:
o	API для взаємодії з клієнтами: Обробка запитів для отримання та оновлення даних (стан здоров'я, активність тварини, налаштування годівлі).
o	База даних: Зберігання інформації про тварин, показники активності, здоров'я та розклад годівлі.
o	Логіка серверної частини:
	Зчитування даних з IoT-пристроїв.
	Оновлення БД.
	Відправка сповіщень про аномалії.
	Обробка команд для розумної годівниці.
2.	UML-діаграма прецедентів
Для UML-діаграми були визначені два типи акторів: звичайний користувач та адміністратор. Щодо прецедентів, обрано такі сценарії: реєстрація, авторизація, додавання нової тварини, редагування даних тварини, а також виконання CRUD-операцій для всіх таблиць, що будуть у базі даних. На основі цих даних було створено UML-діаграму (рис. 1).
 
Рисунок 1 - Use Case Diagram

3.	 ER-діаграма БД
Для діаграми створено такі таблиці: Pets, Owners, HealthData, FeedingShelude, ActivityData (рис.2).
 
Рисунок 2 – ER-діаграма БД

4.	Діаграма структури БД
Для бази даних був використаний PostgreSQL та pgAdmin4. Для створення таблиць був написаний спеціальний SQL запит (Додаток А).
Діаграма утвореної бази даних:
 
Рисунок 3 – Діаграма структури БД
5.	Функції роботи з БД
Для роботи з базою даних були розроблені наступні функції:
	registerUser: Реєструє нового користувача. Функція приймає ім'я користувача, пароль та ідентифікатор групи користувачів, хешує пароль за допомогою bcrypt та додає користувача в таблицю users у базі даних.
	loginUser: Авторизує користувача. Функція перевіряє ім'я користувача, отримує його запис із бази даних і звіряє хешований пароль із введеним.
Логіка взаємодії серверної частини з БД продемонстрована в Додатку Б.

6.	Програмна реалізація розробленого API
Для програмної реалізації розробленого API використовуються два основних маршрути: для реєстрації та авторизації користувачів. Реєстрація передбачає хешування пароля та збереження даних користувача в базі даних, а авторизація — перевірку введеного пароля з хешованим у базі. 
Для документування API обрано Swagger, що дозволяє автоматично генерувати документацію, полегшуючи розробку та тестування API. Використання Express забезпечує простоту налаштування та масштабованість серверної частини. 
 
Рисунок 4 – Реалізація розробленого API
Цей фрагмент коду, що відповідає за налаштування серверної частини додатку за допомогою фреймворку Express, який забезпечує обробку HTTP-запитів від клієнтів можна переглянути в Додатку В.

Посилання на відео ролик: https://youtu.be/-hoX-fqbta4

Висновки: У результаті виконання роботи було розроблено програмну систему, що включає серверну частину, базу даних та API для взаємодії з клієнтами. Було створено UML діаграму прецедентів, яка чітко визначила взаємодію між користувачами та системою, а також ER діаграму для відображення структури даних, що забезпечує коректну організацію і зберігання інформації в базі даних.
Розробка бази даних включала створення таблиць для зберігання даних про користувачів, тварин, їх здоров'я та активність. Для цієї бази була побудована діаграма структури БД, що відображає взаємозв'язки між таблицями.



Додаток А – SQL запити для створення таблиць

1  CREATE TABLE Owners (
2    id SERIAL PRIMARY KEY,
3    username VARCHAR(50) UNIQUE NOT NULL,
4    password VARCHAR(255) NOT NULL,
5    email VARCHAR(100) UNIQUE NOT NULL,
6    phone VARCHAR(20),
7    role VARCHAR(20) DEFAULT 'user' -- 'user' або 'admin'
8 );

9 CREATE TABLE Pets (
10  id SERIAL PRIMARY KEY,
11   owner_id INT REFERENCES Owners(id) ON DELETE CASCADE,
12    name VARCHAR(50) NOT NULL,
13    type VARCHAR(50),
14    breed VARCHAR(50),
15    age INT,
16    weight FLOAT
17 );

18  CREATE TABLE HealthData (
19    id SERIAL PRIMARY KEY,
20    pet_id INT REFERENCES Pets(id) ON DELETE CASCADE,
21    date DATE NOT NULL,
22    temperature FLOAT,
23    heart_rate INT
24 );

25  CREATE TABLE FeedingSchedule (
26    id SERIAL PRIMARY KEY,
27    pet_id INT REFERENCES Pets(id) ON DELETE CASCADE,
28    date DATE NOT NULL,
29    food_type VARCHAR(100),
30    quantity FLOAT
31 );

32  CREATE TABLE ActivityData (
33    id SERIAL PRIMARY KEY,
34    pet_id INT REFERENCES Pets(id) ON DELETE CASCADE,
35    date DATE NOT NULL,
36    steps INT,
37    distance FLOAT,
38    sleep_duration FLOAT
39 );




Додаток Б – Логіка взаємодії серверної частини з БД

Функція registerUser:
1  const bcrypt = require('bcrypt');
2  const client = require('./db'); // підключення до бази даних
3  const registerUser = async (username, password, userGroupId) => {
4    try {
5      const hashedPassword = await bcrypt.hash(password, 10); // хешування пароля
6      const query = `
7        INSERT INTO users (username, password, user_group_id)
8        VALUES ($1, $2, $3)
9        RETURNING *;
10     `;
11     const values = [username, hashedPassword, userGroupId];
12     
13     const res = await client.query(query, values); // виконання запиту до БД
14     console.log("Користувач зареєстрований:", res.rows[0]);
15     return res.rows[0]; // повертає зареєстрованого користувача
16   } catch (err) {
17     console.error("Помилка при реєстрації користувача:", err.stack);
18     throw err;
19   }
20 };

Функція loginUser:
1  const loginUser = async (username, password) => {
2    try {
3      const query = `SELECT * FROM users WHERE username = $1;`; // запит на отримання користувача
4      const values = [username];
      
5      const res = await client.query(query, values); // виконання запиту до БД
6      
7      if (res.rows.length === 0) {
8        throw new Error("Користувач не знайдений");
9      } 
10     const user = res.rows[0];
11     const isMatch = await bcrypt.compare(password, user.password); // перевірка пароля
12     if (!isMatch) {
13       throw new Error("Невірний пароль");
14     }
15     console.log("Користувач авторизований:", user);
16     return user; // повертає авторизованого користувача
17   } catch (err) {
18     console.error("Помилка при авторизації користувача:", err.stack);
19     throw err;
20   }
21 };



Додаток В – Логіка взаємодії серверної частини з клієнтами

1  const express = require('express'); // підключення фреймворку Express
2  const client = require('./db'); // підключення до бази даних
3  const { registerUser, loginUser } = require('./functions'); // імпорт функцій для реєстрації та авторизації
4  const swaggerJSDoc = require('swagger-jsdoc'); // для генерації документації Swagger
5  const swaggerUi = require('swagger-ui-express'); // для інтеграції Swagger UI
6
7  const app = express(); // ініціалізація додатку Express
8  app.use(express.json()); // налаштування для роботи з JSON у запитах
9
10 const swaggerOptions = { // налаштування Swagger
11   definition: {
12     openapi: '3.0.0',
13     info: {
14       title: 'API для роботи з "PetTracker"',
15       version: '1.0.0',
16     },
17     servers: [
18       {
19         url: 'http://localhost:3000', // сервер API
20       },
21     ],
22   },
23   apis: ['./server.js'], // шлях до документації
24 };
25
26 const swaggerSpec = swaggerJSDoc(swaggerOptions); // створення документації
27
28 app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec)); // маршрут для доступу до документації Swagger
29 app.post('/register', async (req, res) => { // маршрут для реєстрації
30   const { username, password, userGroupId } = req.body; // отримання даних з запиту
31   try {
32     const user = await registerUser(username, password, userGroupId); // виклик функції реєстрації
33     res.status(200).json(user); // повернення успішної відповіді
34   } catch (err) {
35     res.status(400).json({ error: 'Помилка при реєстрації користувача' }); // помилка при реєстрації
36   }
37 });
38
39 app.post('/login', async (req, res) => { // маршрут для авторизації
40   const { username, password } = req.body; // отримання даних з запиту
41   try {
42     const user = await loginUser(username, password); // виклик функції авторизації
43     res.status(200).json(user); // повернення успішної відповіді
44   } catch (err) {
45     res.status(400).json({ error: 'Невірний логін або пароль' }); // помилка при авторизації
46   }
47 });

